[
    {
        "label": "cython_test",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "cython_test",
        "description": "cython_test",
        "detail": "cython_test",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "setup",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "cythonize",
        "importPath": "Cython.Build",
        "description": "Cython.Build",
        "isExtraImport": true,
        "detail": "Cython.Build",
        "documentation": {}
    },
    {
        "label": "prime_counter",
        "importPath": "src.python",
        "description": "src.python",
        "isExtraImport": true,
        "detail": "src.python",
        "documentation": {}
    },
    {
        "label": "unittest",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "unittest",
        "description": "unittest",
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "timer",
        "kind": 5,
        "importPath": "src.cython.cython_test_call",
        "description": "src.cython.cython_test_call",
        "peekOfCode": "timer = time.time()\ncython_test.main()\ntimer = time.time() - timer\nprint(f\"Runs in: {timer:.3f} seconds\")",
        "detail": "src.cython.cython_test_call",
        "documentation": {}
    },
    {
        "label": "timer",
        "kind": 5,
        "importPath": "src.cython.cython_test_call",
        "description": "src.cython.cython_test_call",
        "peekOfCode": "timer = time.time() - timer\nprint(f\"Runs in: {timer:.3f} seconds\")",
        "detail": "src.cython.cython_test_call",
        "documentation": {}
    },
    {
        "label": "test",
        "kind": 2,
        "importPath": "src.python.prime_counter",
        "description": "src.python.prime_counter",
        "peekOfCode": "def test(amount):\n    primes = []\n    found = 0\n    number = 2\n    while found < amount:\n        for i in primes:\n            if number % i == 0:\n                break\n        else:\n            primes.append(number)",
        "detail": "src.python.prime_counter",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "src.python.prime_counter",
        "description": "src.python.prime_counter",
        "peekOfCode": "def main():\n    tests = []\n    runs = 4\n    amount = 10000\n    for run in range(runs):\n        timer = time.perf_counter()\n        test(amount)\n        timer = time.perf_counter()  - timer\n        tests.append(timer)\n    total = 0",
        "detail": "src.python.prime_counter",
        "documentation": {}
    },
    {
        "label": "TestPrimeCounter",
        "kind": 6,
        "importPath": "tests.python.test_prime_counter",
        "description": "tests.python.test_prime_counter",
        "peekOfCode": "class TestPrimeCounter(unittest.TestCase):\n    def test_prime_counter_small(self):\n        self.assertEqual(prime_counter.test(6), [2, 3, 5, 7, 11, 13])\n    def test_prime_counter_large(self):\n        self.assertEqual(prime_counter.test(46), [\n            2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n            71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139,\n            149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199\n            ])\n    def test_prime_counter_edge(self):",
        "detail": "tests.python.test_prime_counter",
        "documentation": {}
    }
]